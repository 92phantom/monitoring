---
# Source: argo-cd/charts/redis-ha/templates/redis-haproxy-deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: argocd-redis-ha-haproxy
  namespace: "argocd"
  labels:
    app: redis-ha
    heritage: "Helm"
    release: "argocd"
    chart: redis-ha-4.22.5
spec:
  strategy:
    type: RollingUpdate
  revisionHistoryLimit: 1
  replicas: 3
  selector:
    matchLabels:
      app: redis-ha-haproxy
      release: argocd
  template:
    metadata:
      name: argocd-redis-ha-haproxy
      labels:
        app: redis-ha-haproxy
        release: argocd
      annotations:
        prometheus.io/port: "9101"
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        checksum/config: 41729c8b600983b574147eb778eb317992f0a620e163e58b070b159548c3f8e6
    spec:
      # Needed when using unmodified rbac-setup.yml

      serviceAccountName: argocd-redis-ha-haproxy
      securityContext:
        fsGroup: 99
        runAsNonRoot: true
        runAsUser: 99
      nodeSelector: {}
      tolerations: null
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: redis-ha-haproxy
                  release: argocd
              topologyKey: kubernetes.io/hostname
      initContainers:
        - name: config-init
          image: haproxy:2.6.4
          imagePullPolicy: IfNotPresent
          resources: {}
          command:
            - sh
          args:
            - /readonly/haproxy_init.sh
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: config-volume
              mountPath: /readonly
              readOnly: true
            - name: data
              mountPath: /data
      containers:
        - name: haproxy
          image: haproxy:2.6.4
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8888
            initialDelaySeconds: 5
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8888
            initialDelaySeconds: 5
            periodSeconds: 3
          ports:
            - name: redis
              containerPort: 6379
            - name: metrics-port
              containerPort: 9101
          resources: {}
          volumeMounts:
            - name: data
              mountPath: /usr/local/etc/haproxy
            - name: shared-socket
              mountPath: /run/haproxy
          lifecycle: {}
      volumes:
        - name: config-volume
          configMap:
            name: argocd-redis-ha-configmap
        - name: shared-socket
          emptyDir: {}
        - name: data
          emptyDir: {}
---
# Source: argo-cd/templates/argocd-applicationset/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-applicationset-controller
  namespace: "argocd"
  labels:
    helm.sh/chart: argo-cd-5.29.1
    app.kubernetes.io/name: argocd-applicationset-controller
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/component: applicationset-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-applicationset-controller
      app.kubernetes.io/instance: argocd
  template:
    metadata:
      labels:
        helm.sh/chart: argo-cd-5.29.1
        app.kubernetes.io/name: argocd-applicationset-controller
        app.kubernetes.io/instance: argocd
        app.kubernetes.io/component: applicationset-controller
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: argocd
    spec:
      serviceAccountName: argocd-applicationset-controller
      containers:
        - name: applicationset-controller
          image: quay.io/argoproj/argocd:v2.6.7
          imagePullPolicy: IfNotPresent
          command:
            - "entrypoint.sh"
          args:
            - argocd-applicationset-controller
            - --metrics-addr=:8080
            - --probe-addr=:8081
            - --webhook-addr=:7000
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_LEADER_ELECTION
              valueFrom:
                configMapKeyRef:
                  key: applicationsetcontroller.enable.leader.election
                  name: argocd-cmd-params-cm
                  optional: true
            - name: ARGOCD_APPLICATIONSET_CONTROLLER_NAMESPACE
              valueFrom:
                configMapKeyRef:
                  key: applicationsetcontroller.namespace
                  name: argocd-cmd-params-cm
                  optional: true
            - name: ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER
              valueFrom:
                configMapKeyRef:
                  key: repo.server
                  name: argocd-cmd-params-cm
                  optional: true
            - name: ARGOCD_APPLICATIONSET_CONTROLLER_POLICY
              valueFrom:
                configMapKeyRef:
                  key: applicationsetcontroller.policy
                  name: argocd-cmd-params-cm
                  optional: true
            - name: ARGOCD_APPLICATIONSET_CONTROLLER_DEBUG
              valueFrom:
                configMapKeyRef:
                  key: applicationsetcontroller.debug
                  name: argocd-cmd-params-cm
                  optional: true
            - name: ARGOCD_APPLICATIONSET_CONTROLLER_LOGFORMAT
              valueFrom:
                configMapKeyRef:
                  key: applicationsetcontroller.log.format
                  name: argocd-cmd-params-cm
                  optional: true
            - name: ARGOCD_APPLICATIONSET_CONTROLLER_LOGLEVEL
              valueFrom:
                configMapKeyRef:
                  key: applicationsetcontroller.log.level
                  name: argocd-cmd-params-cm
                  optional: true
            - name: ARGOCD_APPLICATIONSET_CONTROLLER_DRY_RUN
              valueFrom:
                configMapKeyRef:
                  key: applicationsetcontroller.dryrun
                  name: argocd-cmd-params-cm
                  optional: true
            - name: ARGOCD_GIT_MODULES_ENABLED
              valueFrom:
                configMapKeyRef:
                  key: applicationsetcontroller.enable.git.submodule
                  name: argocd-cmd-params-cm
                  optional: true
            - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_PROGRESSIVE_SYNCS
              valueFrom:
                configMapKeyRef:
                  key: applicationsetcontroller.enable.progressive.syncs
                  name: argocd-cmd-params-cm
                  optional: true
          ports:
            - name: metrics
              containerPort: 8080
              protocol: TCP
            - name: probe
              containerPort: 8081
              protocol: TCP
            - name: webhook
              containerPort: 7000
              protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /app/config/ssh
              name: ssh-known-hosts
            - mountPath: /app/config/tls
              name: tls-certs
            - mountPath: /app/config/gpg/source
              name: gpg-keys
            - mountPath: /app/config/gpg/keys
              name: gpg-keyring
            - mountPath: /tmp
              name: tmp
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argocd-applicationset-controller
                topologyKey: kubernetes.io/hostname
      volumes:
        - name: ssh-known-hosts
          configMap:
            name: argocd-ssh-known-hosts-cm
        - name: tls-certs
          configMap:
            name: argocd-tls-certs-cm
        - name: gpg-keys
          configMap:
            name: argocd-gpg-keys-cm
        - name: gpg-keyring
          emptyDir: {}
        - name: tmp
          emptyDir: {}
      dnsPolicy: ClusterFirst
---
# Source: argo-cd/templates/argocd-notifications/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-notifications-controller
  namespace: "argocd"
  labels:
    helm.sh/chart: argo-cd-5.29.1
    app.kubernetes.io/name: argocd-notifications-controller
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/component: notifications-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-notifications-controller
      app.kubernetes.io/instance: argocd
  template:
    metadata:
      labels:
        helm.sh/chart: argo-cd-5.29.1
        app.kubernetes.io/name: argocd-notifications-controller
        app.kubernetes.io/instance: argocd
        app.kubernetes.io/component: notifications-controller
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: argocd
    spec:
      serviceAccountName: argocd-notifications-controller
      containers:
        - name: notifications-controller
          image: quay.io/argoproj/argocd:v2.6.7
          imagePullPolicy: IfNotPresent
          command:
            - argocd-notifications
            - --metrics-port=9001
            - --loglevel=info
            - --logformat=text
            - --namespace=argocd
            - --argocd-repo-server=argocd-repo-server:8081
          ports:
            - name: metrics
              containerPort: 9001
              protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          workingDir: /app
          volumeMounts:
            - name: tls-certs
              mountPath: /app/config/tls
            - name: argocd-repo-server-tls
              mountPath: /app/config/reposerver/tls
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argocd-notifications-controller
                topologyKey: kubernetes.io/hostname
      volumes:
        - name: tls-certs
          configMap:
            name: argocd-tls-certs-cm
        - name: argocd-repo-server-tls
          secret:
            secretName: argocd-repo-server-tls
            optional: true
            items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      dnsPolicy: ClusterFirst
---
# Source: argo-cd/templates/argocd-repo-server/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-repo-server
  namespace: "argocd"
  labels:
    helm.sh/chart: argo-cd-5.29.1
    app.kubernetes.io/name: argocd-repo-server
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/component: repo-server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
spec:
  replicas: 2
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-repo-server
      app.kubernetes.io/instance: argocd
  template:
    metadata:
      annotations:
        checksum/cmd-params: 6c961b19f93171a935eea471e4f1e45d33535fc8410d60681bc6952bc547c659
      labels:
        helm.sh/chart: argo-cd-5.29.1
        app.kubernetes.io/name: argocd-repo-server
        app.kubernetes.io/instance: argocd
        app.kubernetes.io/component: repo-server
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: argocd
    spec:
      serviceAccountName: argocd-repo-server
      containers:
        - name: repo-server
          image: quay.io/argoproj/argocd:v2.6.7
          imagePullPolicy: IfNotPresent
          command:
            - "entrypoint.sh"
          args:
            - argocd-repo-server
            - --port=8081
            - --metrics-port=8084
          env:
            - name: ARGOCD_RECONCILIATION_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: argocd-cm
                  key: timeout.reconciliation
                  optional: true
            - name: ARGOCD_REPO_SERVER_LOGFORMAT
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.log.format
                  optional: true
            - name: ARGOCD_REPO_SERVER_LOGLEVEL
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.log.level
                  optional: true
            - name: ARGOCD_REPO_SERVER_PARALLELISM_LIMIT
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.parallelism.limit
                  optional: true
            - name: ARGOCD_REPO_SERVER_DISABLE_TLS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.disable.tls
                  optional: true
            - name: ARGOCD_TLS_MIN_VERSION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.tls.minversion
                  optional: true
            - name: ARGOCD_TLS_MAX_VERSION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.tls.maxversion
                  optional: true
            - name: ARGOCD_TLS_CIPHERS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.tls.ciphers
                  optional: true
            - name: ARGOCD_REPO_CACHE_EXPIRATION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.repo.cache.expiration
                  optional: true
            - name: REDIS_SERVER
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: redis.server
                  optional: true
            - name: REDIS_COMPRESSION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: redis.compression
                  optional: true
            - name: REDISDB
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: redis.db
                  optional: true
            - name: REDIS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: argocd-redis-ha-haproxy
                  key: redis-username
                  optional: true
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: argocd-redis-ha-haproxy
                  key: redis-password
                  optional: true
            - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.default.cache.expiration
                  optional: true
            - name: ARGOCD_REPO_SERVER_OTLP_ADDRESS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: otlp.address
                  optional: true
            - name: ARGOCD_REPO_SERVER_MAX_COMBINED_DIRECTORY_MANIFESTS_SIZE
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.max.combined.directory.manifests.size
                  optional: true
            - name: ARGOCD_REPO_SERVER_PLUGIN_TAR_EXCLUSIONS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.plugin.tar.exclusions
                  optional: true
            - name: ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS
              valueFrom:
                configMapKeyRef:
                  key: reposerver.allow.oob.symlinks
                  name: argocd-cmd-params-cm
                  optional: true
            - name: ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE
              valueFrom:
                configMapKeyRef:
                  key: reposerver.streamed.manifest.max.tar.size
                  name: argocd-cmd-params-cm
                  optional: true
            - name: ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE
              valueFrom:
                configMapKeyRef:
                  key: reposerver.streamed.manifest.max.extracted.size
                  name: argocd-cmd-params-cm
                  optional: true
            - name: ARGOCD_GIT_MODULES_ENABLED
              valueFrom:
                configMapKeyRef:
                  key: reposerver.enable.git.submodule
                  name: argocd-cmd-params-cm
                  optional: true
            - name: HELM_CACHE_HOME
              value: /helm-working-dir
            - name: HELM_CONFIG_HOME
              value: /helm-working-dir
            - name: HELM_DATA_HOME
              value: /helm-working-dir
          volumeMounts:
            - mountPath: /app/config/ssh
              name: ssh-known-hosts
            - mountPath: /app/config/tls
              name: tls-certs
            - mountPath: /app/config/gpg/source
              name: gpg-keys
            - mountPath: /app/config/gpg/keys
              name: gpg-keyring
            - mountPath: /app/config/reposerver/tls
              name: argocd-repo-server-tls
            - mountPath: /helm-working-dir
              name: helm-working-dir
            - mountPath: /home/argocd/cmp-server/plugins
              name: plugins
            - mountPath: /tmp
              name: tmp
          ports:
            - name: repo-server
              containerPort: 8081
              protocol: TCP
            - name: metrics
              containerPort: 8084
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz?full=true
              port: metrics
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /healthz
              port: metrics
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
      initContainers:
        - command:
            - cp
            - -n
            - /usr/local/bin/argocd
            - /var/run/argocd/argocd-cmp-server
          image: quay.io/argoproj/argocd:v2.6.7
          imagePullPolicy: IfNotPresent
          name: copyutil
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /var/run/argocd
              name: var-files
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argocd-repo-server
                topologyKey: kubernetes.io/hostname
      volumes:
        - name: helm-working-dir
          emptyDir: {}
        - name: plugins
          emptyDir: {}
        - name: var-files
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: ssh-known-hosts
          configMap:
            name: argocd-ssh-known-hosts-cm
        - name: tls-certs
          configMap:
            name: argocd-tls-certs-cm
        - name: gpg-keys
          configMap:
            name: argocd-gpg-keys-cm
        - name: gpg-keyring
          emptyDir: {}
        - name: argocd-repo-server-tls
          secret:
            secretName: argocd-repo-server-tls
            optional: true
            items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      dnsPolicy: ClusterFirst
---
# Source: argo-cd/templates/argocd-server/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-server
  namespace: "argocd"
  labels:
    helm.sh/chart: argo-cd-5.29.1
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
spec:
  replicas: 2
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-server
      app.kubernetes.io/instance: argocd
  template:
    metadata:
      annotations:
        checksum/cmd-params: 6c961b19f93171a935eea471e4f1e45d33535fc8410d60681bc6952bc547c659
      labels:
        helm.sh/chart: argo-cd-5.29.1
        app.kubernetes.io/name: argocd-server
        app.kubernetes.io/instance: argocd
        app.kubernetes.io/component: server
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: argocd
    spec:
      serviceAccountName: argocd-server
      containers:
        - name: server
          image: quay.io/argoproj/argocd:v2.6.7
          imagePullPolicy: IfNotPresent
          command:
            - argocd-server
            - --insecure
            - --port=8080
            - --metrics-port=8083
          env:
            - name: ARGOCD_SERVER_INSECURE
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.insecure
                  optional: true
            - name: ARGOCD_SERVER_BASEHREF
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.basehref
                  optional: true
            - name: ARGOCD_SERVER_ROOTPATH
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.rootpath
                  optional: true
            - name: ARGOCD_SERVER_LOGFORMAT
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.log.format
                  optional: true
            - name: ARGOCD_SERVER_LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.log.level
                  optional: true
            - name: ARGOCD_SERVER_REPO_SERVER
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: repo.server
                  optional: true
            - name: ARGOCD_SERVER_DEX_SERVER
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.dex.server
                  optional: true
            - name: ARGOCD_SERVER_DISABLE_AUTH
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.disable.auth
                  optional: true
            - name: ARGOCD_SERVER_ENABLE_GZIP
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.enable.gzip
                  optional: true
            - name: ARGOCD_SERVER_REPO_SERVER_TIMEOUT_SECONDS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.repo.server.timeout.seconds
                  optional: true
            - name: ARGOCD_SERVER_X_FRAME_OPTIONS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.x.frame.options
                  optional: true
            - name: ARGOCD_SERVER_CONTENT_SECURITY_POLICY
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.content.security.policy
                  optional: true
            - name: ARGOCD_SERVER_REPO_SERVER_PLAINTEXT
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.repo.server.plaintext
                  optional: true
            - name: ARGOCD_SERVER_REPO_SERVER_STRICT_TLS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.repo.server.strict.tls
                  optional: true
            - name: ARGOCD_SERVER_DEX_SERVER_PLAINTEXT
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.dex.server.plaintext
                  optional: true
            - name: ARGOCD_SERVER_DEX_SERVER_STRICT_TLS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.dex.server.strict.tls
                  optional: true
            - name: ARGOCD_TLS_MIN_VERSION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.tls.minversion
                  optional: true
            - name: ARGOCD_TLS_MAX_VERSION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.tls.maxversion
                  optional: true
            - name: ARGOCD_TLS_CIPHERS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.tls.ciphers
                  optional: true
            - name: ARGOCD_SERVER_CONNECTION_STATUS_CACHE_EXPIRATION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.connection.status.cache.expiration
                  optional: true
            - name: ARGOCD_SERVER_OIDC_CACHE_EXPIRATION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.oidc.cache.expiration
                  optional: true
            - name: ARGOCD_SERVER_LOGIN_ATTEMPTS_EXPIRATION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.login.attempts.expiration
                  optional: true
            - name: ARGOCD_SERVER_STATIC_ASSETS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.staticassets
                  optional: true
            - name: ARGOCD_APP_STATE_CACHE_EXPIRATION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.app.state.cache.expiration
                  optional: true
            - name: REDIS_SERVER
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: redis.server
                  optional: true
            - name: REDIS_COMPRESSION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: redis.compression
                  optional: true
            - name: REDISDB
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: redis.db
                  optional: true
            - name: REDIS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: argocd-redis-ha-haproxy
                  key: redis-username
                  optional: true
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: argocd-redis-ha-haproxy
                  key: redis-password
                  optional: true
            - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.default.cache.expiration
                  optional: true
            - name: ARGOCD_MAX_COOKIE_NUMBER
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.http.cookie.maxnumber
                  optional: true
            - name: ARGOCD_SERVER_OTLP_ADDRESS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: otlp.address
                  optional: true
            - name: ARGOCD_APPLICATION_NAMESPACES
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: application.namespaces
                  optional: true
            - name: ARGOCD_SERVER_ENABLE_PROXY_EXTENSION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: server.enable.proxy.extension
                  optional: true
          volumeMounts:
            - mountPath: /app/config/ssh
              name: ssh-known-hosts
            - mountPath: /app/config/tls
              name: tls-certs
            - mountPath: /app/config/server/tls
              name: argocd-repo-server-tls
            - mountPath: /app/config/dex/tls
              name: argocd-dex-server-tls
            - mountPath: /home/argocd
              name: plugins-home
            - mountPath: /shared/app/custom
              name: styles
            - mountPath: /tmp
              name: tmp
          ports:
            - name: server
              containerPort: 8080
              protocol: TCP
            - name: metrics
              containerPort: 8083
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz?full=true
              port: server
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /healthz
              port: server
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argocd-server
                topologyKey: kubernetes.io/hostname
      volumes:
        - name: plugins-home
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: ssh-known-hosts
          configMap:
            name: argocd-ssh-known-hosts-cm
        - name: tls-certs
          configMap:
            name: argocd-tls-certs-cm
        - name: styles
          configMap:
            name: argocd-styles-cm
            optional: true
        - name: argocd-repo-server-tls
          secret:
            secretName: argocd-repo-server-tls
            optional: true
            items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
        - name: argocd-dex-server-tls
          secret:
            secretName: argocd-dex-server-tls
            optional: true
            items:
              - key: tls.crt
                path: tls.crt
              - key: ca.crt
                path: ca.crt
      dnsPolicy: ClusterFirst
---
# Source: argo-cd/templates/dex/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-dex-server
  namespace: "argocd"
  labels:
    helm.sh/chart: argo-cd-5.29.1
    app.kubernetes.io/name: argocd-dex-server
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/component: dex-server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argocd
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-dex-server
      app.kubernetes.io/instance: argocd
  template:
    metadata:
      annotations:
        checksum/cmd-params: 6c961b19f93171a935eea471e4f1e45d33535fc8410d60681bc6952bc547c659
      labels:
        helm.sh/chart: argo-cd-5.29.1
        app.kubernetes.io/name: argocd-dex-server
        app.kubernetes.io/instance: argocd
        app.kubernetes.io/component: dex-server
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: argocd
    spec:
      serviceAccountName: argocd-dex-server
      containers:
        - name: dex-server
          image: ghcr.io/dexidp/dex:v2.35.3
          imagePullPolicy: IfNotPresent
          command:
            - /shared/argocd-dex
            - --logformat=text
            - --loglevel=info
          args:
            - rundex
          env:
            - name: ARGOCD_DEX_SERVER_DISABLE_TLS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: dexserver.disable.tls
                  optional: true
          ports:
            - name: http
              containerPort: 5556
              protocol: TCP
            - name: grpc
              containerPort: 5557
              protocol: TCP
            - name: metrics
              containerPort: 5558
              protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: static-files
              mountPath: /shared
            - name: dexconfig
              mountPath: /tmp
            - name: argocd-dex-server-tls
              mountPath: /tls
      initContainers:
        - name: copyutil
          image: quay.io/argoproj/argocd:v2.6.7
          imagePullPolicy: IfNotPresent
          command:
            - cp
            - -n
            - /usr/local/bin/argocd
            - /shared/argocd-dex
          volumeMounts:
            - mountPath: /shared
              name: static-files
            - mountPath: /tmp
              name: dexconfig
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argocd-dex-server
                topologyKey: kubernetes.io/hostname
      volumes:
        - name: static-files
          emptyDir: {}
        - name: dexconfig
          emptyDir: {}
        - name: argocd-dex-server-tls
          secret:
            secretName: argocd-dex-server-tls
            optional: true
            items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      dnsPolicy: ClusterFirst
